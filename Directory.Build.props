<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  
  <ItemGroup Condition="'$(MSBuildProjectExtension)' == '.csproj'">
    <TypeDefinitionFiles Include="$(ProjectDir)**\*.json" Exclude="$(BaseIntermediateOutputPath)**\*;$(OutputPath)**\*" />
    <TypeDefinitionFiles Include="$(ProjectDir)**\_generate.xml" />

    <!--
      Step 2: Register the discovered files with the FUTD check.
      This tells VS to monitor these files. [1]
    -->
    <UpToDateCheckInput Include="@(TypeDefinitionFiles)" />

    <!--
      Step 3: THE CRITICAL FIX from the documentation.
      Register our marker file as a key output. The FUTD check will now compare
      the timestamps of the inputs against this specific file. [1]
    -->
    <UpToDateCheckOutput Include="$(ProjectDir)Generated\__codegen.marker" />

    <!--
      4. THE MAGIC BULLET: Tell the FUTD that the project file itself is an input.
      This forces it to re-evaluate globs on every build, defeating the cache and
      correctly detecting changes in files matched by the wildcards above.
    -->
    <UpToDateCheckInput Include="$(MSBuildProjectFullPath)" />

    <GeneratedFiles Include="$(ProjectDir)Generated\**\*.cs" />
    <Compile Include="@(GeneratedFiles)" />
  </ItemGroup>
  
  <!--
    This is the main target for running the code generator.
    It correctly uses Inputs and Outputs for incremental build checks.
  -->
  <Target Name="RunBravillianTool"
          BeforeTargets="BeforeBuild"
          Condition="'$(MSBuildProjectExtension)' == '.csproj'"
          Inputs="@(TypeDefinitionFiles)"
          Outputs="$(ProjectDir)Generated\__codegen.marker">

    <Message Importance="High" Text="ðŸ”„ Running bravillian-gen codegen..." />

    <MakeDir Directories="$(ProjectDir)Generated" />
    <!--<Delete Files="$(ProjectDir)Generated\**\*.cs" Condition="Exists('$(ProjectDir)Generated\')" />-->
    
    <PropertyGroup>
      <BravillianResponseFile>$(IntermediateOutputPath)bravillian-gen.rsp</BravillianResponseFile>
    </PropertyGroup>

    <WriteLinesToFile
      File="$(BravillianResponseFile)"
      Lines="@(TypeDefinitionFiles)"
      Overwrite="true"
      Encoding="UTF-8" />

    <!--
      Recommendation: A more robust way to pass multiple files to an Exec task.
      This creates a '-input "path"' for each file and joins them with spaces,
      which is much safer for paths with spaces. Your tool must support multiple -input flags.
      If your tool only supports a single argument with semicolon-separated paths, your original command is fine.
    -->
    <Exec Command='dotnet tool run bravillian-gen --input @"$(BravillianResponseFile)" --output "$(ProjectDir)Generated"' />

    <!--
      STEP 1: After generation, create a new ItemGroup that captures the output files.
    -->
    <!-- <ItemGroup>
      <GeneratedFiles Include="$(ProjectDir)Generated\**\*.cs" />
    </ItemGroup> -->

    <!--
      STEP 2: Add the newly captured files to the Compile item group.
      This tells the C# compiler to include these files in THIS build run.
    -->
    <!-- <ItemGroup>
      <Compile Include="@(GeneratedFiles)" />
    </ItemGroup> -->

    <!--
      STEP 3: Finally, touch the marker file to update its timestamp,
      signaling that the outputs are now up-to-date with the inputs.
    -->
    <Touch
      AlwaysCreate="true"
      Files="$(ProjectDir)Generated\__codegen.marker" />
  </Target>

  
	<!-- Keep global Using directives -->
	<ItemGroup Condition="'$(MSBuildProjectExtension)' != '.dcproj' AND '$(MSBuildProjectExtension)' != '.sqlproj' AND $(MSBuildProjectName.StartsWith('Bravillian.Generators')) == false AND $(MSBuildProjectName.StartsWith('Bravillian.Database')) == false">
		<Using Include="System" />
		<Using Include="System.Collections.Generic" />
		<Using Include="System.Diagnostics" />
		<Using Include="System.Diagnostics.CodeAnalysis" />
		<Using Include="System.IO" />
		<Using Include="System.Linq" />
		<Using Include="System.Net.Http" />
		<Using Include="System.Text.Json" />
		<Using Include="System.Text.Json.Nodes" />
		<Using Include="System.Text.Json.Serialization" />
		<Using Include="System.Threading" />
		<Using Include="System.Threading.Tasks" />
	</ItemGroup>

	<!-- Keep core project references and build tooling -->
	<ItemGroup Condition="'$(MSBuildProjectExtension)' != '.dcproj' AND '$(MSBuildProjectExtension)' != '.sqlproj' AND $(MSBuildProjectName.StartsWith('Bravillian.Database')) == false">
		<RuntimeHostConfigurationOption Include="System.Runtime.Loader.UseRidGraph" Value="true" />

		<!-- Keep InternalsVisibleTo -->
		<AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
			<_Parameter1>DynamicProxyGenAssembly2</_Parameter1>
		</AssemblyAttribute>

		<!-- Keep SourceLink, ReproducibleBuilds, GitVersion -->
		<PackageReference Include="Microsoft.SourceLink.GitHub" PrivateAssets="All" Version="8.0.0" />
		<PackageReference Include="DotNet.ReproducibleBuilds.Isolated" PrivateAssets="All" Version="1.2.25" />

		<PackageReference Include="StyleCop.Analyzers" Condition="$(MSBuildProjectExtension) == '.csproj'" Version="1.1.118">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
		</PackageReference>
		<PackageReference Include="Microsoft.CodeAnalysis.PublicApiAnalyzers" Condition="$(MSBuildProjectName.EndsWith('Tests')) == false" Version="4.14.0">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
		</PackageReference>
		<PackageReference Include="Microsoft.CodeAnalysis.BannedApiAnalyzers" Version="4.14.0">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
		</PackageReference>
		<PackageReference Include="Roslynator.Formatting.Analyzers" Condition="$(MSBuildProjectExtension) == '.csproj'" Version="4.13.1">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
		</PackageReference>
		<PackageReference Include="Roslynator.CodeAnalysis.Analyzers" Condition="$(MSBuildProjectExtension) == '.csproj'" Version="4.13.1">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
		</PackageReference>
		<PackageReference Include="Roslynator.Analyzers" Condition="$(MSBuildProjectExtension) == '.csproj'" Version="4.13.1">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
		</PackageReference>
		<PackageReference Include="Microsoft.CodeAnalysis.AnalyzerUtilities" Condition="$(MSBuildProjectExtension) == '.csproj'" >
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
		</PackageReference>
		<PackageReference Include="Meziantou.Analyzer" Condition="$(MSBuildProjectExtension) == '.csproj'" Version="2.0.205">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
		</PackageReference>
	</ItemGroup>

	<!-- Keep Test Project settings -->
	<PropertyGroup Condition="$(MSBuildProjectName.EndsWith('Tests')) OR $(MSBuildProjectName.EndsWith('Test'))">
		<IsPackable>false</IsPackable>
		<IsTestProject>true</IsTestProject>
		<HasRuntimeOutput>true</HasRuntimeOutput>
		<PreserveCompilationContext>true</PreserveCompilationContext>
	</PropertyGroup>

	<!-- Keep Test Project references -->
	<ItemGroup Condition="$(MSBuildProjectName.EndsWith('Tests')) OR $(MSBuildProjectName.EndsWith('Test'))">
		<Using Include="Shouldly" />
		<Using Include="Xunit" />

		<PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.14.1" />
		<PackageReference Include="Shouldly" Version="4.3.0" />
		<PackageReference Include="xunit.v3" Version="3.0.0" />
		<PackageReference Include="xunit.runner.visualstudio" Version="3.1.3" />
		<PackageReference Include="coverlet.collector" Version="6.0.4">
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
			<PrivateAssets>all</PrivateAssets>
		</PackageReference>
		<PackageReference Include="coverlet.msbuild" Version="6.0.4">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
		</PackageReference>
		<PackageReference Include="NSubstitute" Version="5.3.0" />
		<!-- Keep NSubstitute analyzers as they are usually helpful and specific to tests -->
		<PackageReference Include="NSubstitute.Analyzers.CSharp" Version="1.0.17">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
		</PackageReference>
	</ItemGroup>

	<ItemGroup Condition="'$(MSBuildProjectExtension)' == '.csproj'">
		<AdditionalFiles Include="$(MSBuildThisFileDirectory)stylecop.json" Link="stylecop.json" />
	</ItemGroup>
</Project>
